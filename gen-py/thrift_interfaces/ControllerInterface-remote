#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thrift_interfaces import ControllerInterface
from thrift_interfaces.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Configuration get_servers_configuration()')
    print('  Configuration get_complete_configuration()')
    print('  ElementState get_state(string element_id)')
    print('  ElementState set_state(string element_id, ElementState new_state)')
    print('  string get_model_id(string element_id)')
    print('  FileChunk get_model_chunk(string element_id, i64 offset, i32 size)')
    print('  string register_element(ElementConfiguration element_configuration)')
    print('  bool is_model_available(string element_id, string model_id)')
    print('  void zip_model_element(string element_id, string model_id)')
    print('  bool is_cloud_available()')
    print('  string instantiate_model(ModelConfiguration model_configuration)')
    print('  string set_test(Test test_configuration)')
    print('  void zip_test_element(string element_id, string test_id)')
    print('  string get_test_id(string element_id)')
    print('  Test get_test(string test_id)')
    print('  void test_completed(string test_id)')
    print('  bool is_test_over(string test_id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ControllerInterface.Client(protocol)
transport.open()

if cmd == 'get_servers_configuration':
    if len(args) != 0:
        print('get_servers_configuration requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_servers_configuration())

elif cmd == 'get_complete_configuration':
    if len(args) != 0:
        print('get_complete_configuration requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_complete_configuration())

elif cmd == 'get_state':
    if len(args) != 1:
        print('get_state requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_state(args[0],))

elif cmd == 'set_state':
    if len(args) != 2:
        print('set_state requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_state(args[0], eval(args[1]),))

elif cmd == 'get_model_id':
    if len(args) != 1:
        print('get_model_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_model_id(args[0],))

elif cmd == 'get_model_chunk':
    if len(args) != 3:
        print('get_model_chunk requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_model_chunk(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'register_element':
    if len(args) != 1:
        print('register_element requires 1 args')
        sys.exit(1)
    pp.pprint(client.register_element(eval(args[0]),))

elif cmd == 'is_model_available':
    if len(args) != 2:
        print('is_model_available requires 2 args')
        sys.exit(1)
    pp.pprint(client.is_model_available(args[0], args[1],))

elif cmd == 'zip_model_element':
    if len(args) != 2:
        print('zip_model_element requires 2 args')
        sys.exit(1)
    pp.pprint(client.zip_model_element(args[0], args[1],))

elif cmd == 'is_cloud_available':
    if len(args) != 0:
        print('is_cloud_available requires 0 args')
        sys.exit(1)
    pp.pprint(client.is_cloud_available())

elif cmd == 'instantiate_model':
    if len(args) != 1:
        print('instantiate_model requires 1 args')
        sys.exit(1)
    pp.pprint(client.instantiate_model(eval(args[0]),))

elif cmd == 'set_test':
    if len(args) != 1:
        print('set_test requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_test(eval(args[0]),))

elif cmd == 'zip_test_element':
    if len(args) != 2:
        print('zip_test_element requires 2 args')
        sys.exit(1)
    pp.pprint(client.zip_test_element(args[0], args[1],))

elif cmd == 'get_test_id':
    if len(args) != 1:
        print('get_test_id requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_test_id(args[0],))

elif cmd == 'get_test':
    if len(args) != 1:
        print('get_test requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_test(args[0],))

elif cmd == 'test_completed':
    if len(args) != 1:
        print('test_completed requires 1 args')
        sys.exit(1)
    pp.pprint(client.test_completed(args[0],))

elif cmd == 'is_test_over':
    if len(args) != 1:
        print('is_test_over requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_test_over(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
